# -*- coding: utf-8 -*-
"""Palindrome_Data_Residency_Assignment_Klari-van-Zyl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HixdCq457azLQA_K41kL5ktUBM5woLyL

# **PALINDROME DATA**

Klari van Zyl

**DATA SCIENCE RESIDENCY INTERVIEW ASSIGNMENT**

INSTRUCTIONS & TASKS:

1) Download the dataset.

2) Calculate and output the following:

    a) What is the total number of people living with HIV (NoPLHIV) in the listed districts according to the Survey estimate?
    b) What is the average NoPLHIV of the two estimates used for "Xhariep"?
    c) Add a column and populate it with the number of people not living with HIV for each row.
    d) What is the total NoPLHIV in all cities (districts with the word "city" or "metro" in the name)?

3) Write the original data (without the caption - originally row 1) with the extra columns as *comma-seperated values* (CSV) to a new .csv file.

Importing the needed libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import scipy.stats as stats

# To enable plotting graphs
# %matplotlib inline

# Docking google drive

from google.colab import drive
drive.mount('/content/drive/')

# Setting up the notebook path

import os

os.chdir('/content/drive/My Drive/PALINDROME')
assign_path = '.'

# Reading the data as a data frame
## Note that the .xlsx file was converted to a .csv file 
### .xlsx files can easily be converted to .csv files using Microsoft Excell

# df -> dataframe

df = pd.read_csv('pone.0212445.s004.csv')

# Viewing the top 20 rows of the dataset

df.head(20)

# Viewing the shape of the dataset 

df.shape

# There are 9 columns and 104 rows in the dataset

# Columns/Variables present are as follows:
## 'District'
## 'Code'
## 'Estimate'
## 'Prevalence_%'
## 'Prevalence_LCL
## 'Prevalence_UCL'
## 'NoPLHIV'
## 'NoPLHIV_LCL'
## 'NoPLHIV_UCL'

# Estimate variable is split into two sub-categories, namely: Survey of Fay-Heriott

# Viewing the information about the dataset
# this gives us a good idea about the data types etc.

df.info()

# Checking the statistical summary 

df.describe().transpose()

# Checking for any missing values

df.isna().sum()

# There are no missing values

"""1a) What is the total number of people living with HIV (NoPLHIV) in the listed districts according to the Survey estimate?"""

# Quick look at the head of the file again

df.head()

# Using the groupby() and sum function from Pandas
## The groupby() function splits the dataframe into the necessary variables: Estimate, NoPLHIV and Survey as the condition

df.groupby('Estimate')['NoPLHIV'].sum()['Survey']

# The total number of people living with HIV (NoPLHIV) in the listed districts according to the Survey estimate is: 6409903

# Selecting the two relevant rows to create a new temporary dataset.
## The rows to be selected are the two Xhariep rows which includes the data from the Survey and Fay-Heriott

# Rename the sliced dataset to df_ave as to not confure or overwrite the original df dataset that is being used for overall functions

df_ave = df[16:18]

# View the head of the sliced set to check if the slice worked correctly

df_ave.head()

# Using the Pandas mean function to calculate the average

df_mean = df_ave["NoPLHIV"].mean()

# Print the mean

print(df_mean)

# The average of the two estimates used for Xhariep is: 12247.5

"""2c) Add a column and populate it with the number of people not living with HIV for each row."""

# Inverse percentage calculation necessary
# Prevalence_% of y(?) = x

# NoPNLHIV = (NoPLHIV * 100) / (Prevalence_%)

# eg.
## NoPNLHIV = (11777 * 100) / (8.3)
## NoPNLHIV =  1177700 / 8.3
## NoPNLHIV =  141891.566

# Adding a column to the df dataset using Pandas
# Simultaneously incorporating the chosen formula for the number of people not living with HIV
# NoPNLHIV -> People Not Living with HIV

df['NoPNLHIV'] = df["NoPLHIV"]*100 / df["Prevalence_%"]

# Print the df dataset to check if the formula worked correctly

print(df)

# I would like to display the NoPNLHIV column without the E notation and in the preferred numerical format
# Converting the NoPNLHIV column to a int will remove the messy numbers 

df["NoPNLHIV"] = df["NoPNLHIV"].apply(np.int64)
print(df)

"""2d) What is the total NoPLHIV in all cities (districts with the word "city" or "metro" in the name)?"""

# Use Pandas filter string contain function
# This function selects the rows that contain the specific text contents

df[df['District'].str.contains("City|Metro")]

# There are 10 rows in total that contain data for districts with the word "city" or "metro"

# Creating a new dataset that only contains the rows with the districts that contain the word "city" or "metro"
# Creating this smaller dataset will make it easier to calculate the NoPLHIV in all cities

df_cities = df[df['District'].str.contains("City|Metro")]

# View the new dataset, df_cities, head to ensure the code executed correctly

df_cities.head(10)

# Use the groupby() and sum function from Pandas

df_cities.groupby('Estimate')['NoPLHIV'].sum()

"""3) Write the original data (without the caption - originally row 1) with the extra columns as *comma-seperated values* (CSV) to a new .csv file."""

# Use Pandas to write the file to .csv

df.to_csv('Palindrome_HIV_Data_Assign_KlarivZyl.csv')

# Use Pandas to read the newly saved file

HIV_data = pd.read_csv('Palindrome_HIV_Data_Assign_KlarivZyl.csv')

# And view the head of the file to ensure that the .csv file was written correctly

HIV_data.head(20)

"""**END OF ASSIGMENT QUESTIONS**

EXTRAS -  Quick Visual Look at the Data
"""

# Read first 10 rows at the ehad of the file

HIV_data.head(10)

sns.set_theme(style="whitegrid")


g = sns.catplot(
    data=HIV_data, kind="bar",
    x="District", y="NoPLHIV", hue="Estimate",
    ci="sd", palette="dark", alpha=.60, height=60
)
g.despine(left=True)
g.set_axis_labels("", "NoPLHIV")
g.legend.set_title("")

# From the catplot above we can see that the differences between the Survey and Fay-Heriott isn't too large
# Upon zooming into the graph, it is clear that the City of Johannesburg has the largest amount of people living with HIV
# Namakwa seems to have the lowest count of people living with HIV

sns.set_theme(style="whitegrid")


g = sns.catplot(
    data=df_cities, kind="bar",
    x="District", y="NoPLHIV", hue="Estimate",
    ci="sd", palette="dark", alpha=.10, height=10
)
g.despine(left=True)
g.set_axis_labels("", "NoPLHIV")
g.legend.set_title("")

# Above we now have a clear visual of the count of people living with HIV in the City and Metro districts.
# Once again the Survey data is not too far off from the Fay-Heriott data, except for the City of Cape Town and the City of Tshwane

sns.set_theme(style="whitegrid")


g = sns.catplot(
    data=df_cities, kind="bar",
    x="District", y="Prevalence_%", hue="Estimate",
    ci="sd", palette="dark", alpha=.10, height=10
)
g.despine(left=True)
g.set_axis_labels("", "Prevalence")
g.legend.set_title("")

# This is now where the data becomes interesting and where once has to look at the bigger picture.
# Even though the City of Johannesburg trumps the other city and metro areas int the number of people living with age,
## when looking at the actual percentages of prevalence per city/metro, it seems that the prevalence of people living with HIV
### is the highest in Buffalo City. Yet in numbers, it was th lowest.

#END

